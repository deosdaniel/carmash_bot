import time
from collections import defaultdict

from aiogram import Router, F
from aiogram.enums import ParseMode
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from keyboards.common import ButtonText, get_on_start_keyboard, get_phone_keyboard, send_order
from states import OrderCar
from utils import send_admin_notification, handle_retry

router = Router()

last_start_calls = defaultdict(float)

# –ö–æ–º–∞–Ω–¥–∞ /start
@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –≤—ã–∑–æ–≤ –º–µ–Ω–µ–µ 2 —Å–µ–∫—É–Ω–¥ –Ω–∞–∑–∞–¥
    user_id = message.from_user.id
    current_time = time.time()

    if current_time - last_start_calls[user_id] < 2:
        return

    last_start_calls[user_id] = current_time


    await state.clear()
    await message.answer(
        text="üöó –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç Carmash!\n\n"
        "–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞—è–≤–∫—É - –Ω–∞–∂–º–∏—Ç–µ /order\n"
        "–û—à–∏–±–ª–∏—Å—å? –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∑–∞—è–≤–∫—É –∑–∞–Ω–æ–≤–æ - –Ω–∞–∂–º–∏—Ç–µ /retry\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç - –Ω–∞–∂–º–∏—Ç–µ /cancel\n"
        "–ü–æ–º–æ—â—å –ø–æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞ - /help",
        parse_mode=ParseMode.HTML,
        reply_markup=get_on_start_keyboard(),
    )

# –ö–æ–º–∞–Ω–¥–∞ /help - —Å–ø—Ä–∞–≤–∫–∞
@router.message(F.text == ButtonText.HELP)
@router.message(Command("help"))
async def cmd_help(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(text="üöó –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ üöó\n\n"
        "/order - –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞—è–≤–∫—É\n"
        "/retry - –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ (–ø—Ä–∏ –æ—à–∏–±–∫–µ)\n"
        "/cancel - –î–ª—è –æ—Ç–º–µ–Ω—ã –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç \n"
        "/help - –°–ø—Ä–∞–≤–∫–∞ –ø–æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞",)


# –ö–æ–º–∞–Ω–¥–∞ /cancel - –æ—Ç–º–µ–Ω–∞ –∑–∞—è–≤–∫–∏
@router.message(F.text == ButtonText.CANCEL)
@router.message(Command("cancel"))
async def cmd_cancel(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫.")
        return
    await state.clear()
    await message.answer("–ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –î–ª—è –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ /order")

# –ö–æ–º–∞–Ω–¥–∞ /retry - –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞—è–≤–∫—É –∑–∞–Ω–æ–≤–æ –ø—Ä–∏ –æ—à–∏–±–∫–µ
@router.message(F.text == ButtonText.RETRY)
@router.message(Command("retry"))
async def cmd_retry(message: Message, state: FSMContext):
    await handle_retry(message.chat.id, state, message.bot)



# –ö–æ–º–∞–Ω–¥–∞ /order - –Ω–∞—á–∞–ª–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏
@router.message(F.text == ButtonText.ORDER)
@router.message(Command("order"))
async def cmd_order(message: Message, state: FSMContext):
    await state.set_state(OrderCar.name)
    await message.answer(
        "üìù –î–∞–≤–∞–π—Ç–µ –æ—Ñ–æ—Ä–º–∏–º –∑–∞—è–≤–∫—É –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å!\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:"
    )



# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏
@router.message(OrderCar.name, F.text)
async def process_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(OrderCar.phone)
    await message.answer(
        "üìû –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
        reply_markup=get_phone_keyboard(),
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@router.message(OrderCar.phone, F.contact)
async def process_phone_contact(message: Message, state: FSMContext):
    await state.update_data(phone=message.contact.phone_number)
    await state.set_state(OrderCar.email)
    await message.answer(
        "üìß –í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:",
        reply_markup=None
    )


@router.message(OrderCar.phone, F.text)
async def process_phone_text(message: Message, state: FSMContext):
    # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    phone = message.text.strip()
    if not any(char.isdigit() for char in phone) or len(phone) < 5:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
        return

    await state.update_data(phone=phone)
    await state.set_state(OrderCar.email)
    await message.answer("üìß –í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ email
@router.message(OrderCar.email, F.text)
async def process_email(message: Message, state: FSMContext):
    email = message.text.strip()
    # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è email
    if '@' not in email or '.' not in email:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email:")
        return

    await state.update_data(email=email)
    await state.set_state(OrderCar.car_model)
    await message.answer("üöó –í–≤–µ–¥–∏—Ç–µ –º–∞—Ä–∫—É –∏ –º–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è:")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞—Ä–∫–∏/–º–æ–¥–µ–ª–∏
@router.message(OrderCar.car_model, F.text)
async def process_car_model(message: Message, state: FSMContext):
    await state.update_data(car_model=message.text)
    await state.set_state(OrderCar.budget)
    await message.answer("üí∞ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –±—é–¥–∂–µ—Ç (–≤ USD):")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –±—é–¥–∂–µ—Ç–∞
@router.message(OrderCar.budget, F.text)
async def process_budget(message: Message, state: FSMContext, bot):
    budget = message.text.strip()
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –±—é–¥–∂–µ—Ç —Ü–∏—Ñ—Ä—ã
    if not any(char.isdigit() for char in budget):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –±—é–¥–∂–µ—Ç —Ü–∏—Ñ—Ä–∞–º–∏:")
        return

    await state.update_data(budget=budget)

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()

    confirmation_text = (
        "üöó *–î–∞–≤–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏–º –≤–∞—à—É –∑–∞—è–≤–∫—É –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π!*\n\n"
        f"üë§ *–ò–º—è:* {data['name']}\n"
        f"üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* {data['phone']}\n"
        f"üìß *Email:* {data['email']}\n"
        f"üöó *–ú–∞—Ä–∫–∞/–ú–æ–¥–µ–ª—å:* {data['car_model']}\n"
        f"üí∞ *–ë—é–¥–∂–µ—Ç:* {data['budget']} USD\n\n"
        "_–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:_"
    )

    await message.answer(
        confirmation_text,
        parse_mode="Markdown",
        reply_markup=send_order()
    )