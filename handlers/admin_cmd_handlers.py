from select import select

from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.utils.markdown import hbold, hlink
from sqlalchemy import select
from config import ADMIN_CHAT_ID
import logging

from database.core import Database
from database.models import Order
from database.order_repository import OrderRepository
from utils.filters import IsAdminChatFilter
from keyboards.common import get_admin_order_keyboard
from utils.texts import ClientReplies

logger = logging.getLogger(__name__)

admin_cmd_router = Router(name="admin_cmd_handlers")
admin_cmd_router.message.filter(IsAdminChatFilter(ADMIN_CHAT_ID))



@admin_cmd_router.message(Command("admin"))
async def cmd_admin(message: Message):

    await message.answer(
        "üë®‚Äçüíº <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
        "üìä <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "/id - –ø–æ–ª—É—á–∏—Ç—å ID —ç—Ç–æ–≥–æ —á–∞—Ç–∞\n"
        "/orders - –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫\n"
        "/order <–Ω–æ–º–µ—Ä_–∑–∞—è–≤–∫–∏> - –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ –ø–æ –∫–æ–∫—Ä–µ—Ç–Ω–æ–π –∑–∞—è–≤–∫–µ\n\n"
        "‚öôÔ∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º:</b>\n"
        "/restart - –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
        "/stop - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞\n\n"
        "üí° <i>–í—Å–µ –∫–æ–º–∞–Ω–¥—ã —Ä–∞–±–æ—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ –≤ —ç—Ç–æ–º —á–∞—Ç–µ</i>"
    )


@admin_cmd_router.message(Command("id"))
async def cmd_id(message: Message):
    await message.answer(f"üÜî ID —ç—Ç–æ–≥–æ —á–∞—Ç–∞: <code>{message.chat.id}</code>")


@admin_cmd_router.message(Command("orders"))
async def cmd_orders(message: Message, db: Database):
    try:
        async with db.get_session() as session:
            repo = OrderRepository(session=session)
            orders_list = await repo.get_all_orders()
            if not orders_list:
                await message.answer("–ó–∞—è–≤–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç")
                return
            response = "üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫:\n\n"
            for order in orders_list:
                response += f"#{order.id} | {order.name} | {order.phone} | {order.city} | {order.car_model} | {order.status}\n"
            await message.answer(response)
    except Exception as e:
        logger.error(f"Error in get orders action: {e}")
        await message.answer(ClientReplies.ERROR_ALERT, show_alert=True)

@admin_cmd_router.message(Command("order"))
async def cmd_order_detail(message: Message, db: Database):
    try:
        msg_parts = message.text.split()
        if len(msg_parts) < 2:
            await message.answer(
                "üìã <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n"
                "/order ID_–∑–∞—è–≤–∫–∏ - –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π –∑–∞—è–≤–∫–∏\n"
                "–ü—Ä–∏–º–µ—Ä: <code>/order 15</code>\n\n"
                "üìä –ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /orders",
                parse_mode="HTML"
            )
            return
        try:
            order_id = int(msg_parts[1])
        except ValueError:
            await message.answer(
                "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID</b>\n\n"
                "ID –∑–∞—è–≤–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.\n"
                "–ü—Ä–∏–º–µ—Ä: <code>/order 15</code>",
                parse_mode="HTML"
            )
            return

        async with db.get_session() as session:
            repo = OrderRepository(session=session)
            order = await repo.get_order_by_id(order_id=order_id)
            if not order:
                await message.answer("‚ùå <b>–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</b>\n\n"
                    f"–ó–∞—è–≤–∫–∞ —Å ID #{order_id} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.\n"
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å ID –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /orders –¥–ª—è —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫.",
                    parse_mode="HTML")
                return

            detail_text = (
                f"üìã {hbold('–î–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏')} #{order.id}\n\n"
                f"üë§ {hbold('–ö–ª–∏–µ–Ω—Ç:')} {order.name}\n"
                f"üìû {hbold('–¢–µ–ª–µ—Ñ–æ–Ω:')} {hlink(order.phone, f'tel:{order.phone}')}\n"
                f"üìß {hbold('Email:')} {order.email}\n"
                f"üöó {hbold('–ê–≤—Ç–æ–º–æ–±–∏–ª—å:')} {order.car_model}\n"
                f"üí∞ {hbold('–ë—é–¥–∂–µ—Ç:')} {order.budget} USD\n"
                f"‚è∞ {hbold('–°–æ–∑–¥–∞–Ω–∞:')} {order.created_at.strftime('%d.%m.%Y %H:%M')}\n"
                f"üìä {hbold('–°—Ç–∞—Ç—É—Å:')} {order.status}"
            )
            await message.answer(detail_text, parse_mode="HTML", reply_markup=get_admin_order_keyboard(order_id=order.id))
    except Exception as e:
        logger.error(f"Error in order detail action: {e}")

        await message.answer(ClientReplies.ERROR_ALERT, show_alert=True)