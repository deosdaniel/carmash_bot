from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.utils.markdown import hbold, hlink
from config import ADMIN_CHAT_ID
import logging

from database.core import Database
from database.repository import OrderRepository
from database.service import OrderService
from utils.filters import IsAdminChatFilter
from keyboards.common import get_admin_order_keyboard
from utils.texts import ClientReplies
from utils.utils import parse_order_id, format_order_detail

logger = logging.getLogger(__name__)

admin_cmd_router = Router(name="admin_cmd_handlers")
admin_cmd_router.message.filter(IsAdminChatFilter(ADMIN_CHAT_ID))


@admin_cmd_router.message(Command("admin"))
async def cmd_admin(message: Message):

    await message.answer(
        "üë®‚Äçüíº <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
        "üìä <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "/id - –ø–æ–ª—É—á–∏—Ç—å ID —ç—Ç–æ–≥–æ —á–∞—Ç–∞\n"
        "/orders - –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫\n"
        "/order <–Ω–æ–º–µ—Ä_–∑–∞—è–≤–∫–∏> - –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ –ø–æ –∫–æ–∫—Ä–µ—Ç–Ω–æ–π –∑–∞—è–≤–∫–µ\n\n"
        "‚öôÔ∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º:</b>\n"
        "/restart - –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
        "/stop - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞\n\n"
        "üí° <i>–í—Å–µ –∫–æ–º–∞–Ω–¥—ã —Ä–∞–±–æ—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ –≤ —ç—Ç–æ–º —á–∞—Ç–µ</i>"
    )


@admin_cmd_router.message(Command("id"))
async def cmd_id(message: Message):
    await message.answer(f"üÜî ID —ç—Ç–æ–≥–æ —á–∞—Ç–∞: <code>{message.chat.id}</code>")


@admin_cmd_router.message(Command("orders"))
async def cmd_orders(message: Message, db: Database):
    try:
        async with db.async_session_factory() as session:
            service = OrderService(session)
            orders_list = await service.get_all_orders()
            if not orders_list:
                await message.answer("–ó–∞—è–≤–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç")
                return
            response = "üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫:\n\n"
            for order in orders_list:
                response += f"#{order.id} | {order.name} | {order.phone} | {order.city} | {order.car_model} | {order.status}\n"
            await message.answer(response)
    except Exception as e:
        logger.error(f"Error in get orders action: {e}")
        await message.answer(ClientReplies.ERROR_ALERT, show_alert=True)


@admin_cmd_router.message(Command("order"))
async def cmd_order_detail(message: Message, db: Database):
    order_id = parse_order_id(message.text)
    if not order_id:
        await message.answer(
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/order ID_–∑–∞—è–≤–∫–∏\n"
            "–ü—Ä–∏–º–µ—Ä: <code>/order 15</code>",
            parse_mode="HTML",
        )
        return
    try:

        async with db.async_session_factory() as session:
            service = OrderService(session)
            order = await service.get_order_by_id(order_id=order_id)
            if not order:
                await message.answer(
                    "‚ùå <b>–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</b>\n\n"
                    f"–ó–∞—è–≤–∫–∞ —Å ID #{order_id} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.\n"
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å ID –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /orders –¥–ª—è —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫.",
                    parse_mode="HTML",
                )
                return
            detail_text = format_order_detail(order)
        await message.answer(
            detail_text,
            parse_mode="HTML",
            reply_markup=get_admin_order_keyboard(order_id=order.id),
        )
    except Exception as e:
        logger.error(f"Error in order detail action: {e}")
        await message.answer(ClientReplies.ERROR_ALERT, show_alert=True)
