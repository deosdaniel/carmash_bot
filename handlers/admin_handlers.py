from select import select

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.utils.markdown import hbold, hlink
from sqlalchemy import update, select
from config import ADMIN_CHAT_ID
import logging

from database.core import Database
from database.models import Order
from handlers.filters import IsAdminChatFilter
from keyboards.common import get_admin_order_keyboard
from utils.texts import ClientReplies, OrderStatus


logger = logging.getLogger(__name__)

admin_router = Router(name="admin_handlers")

admin_router.message.filter(IsAdminChatFilter(ADMIN_CHAT_ID))
admin_router.callback_query.filter(IsAdminChatFilter(ADMIN_CHAT_ID))


@admin_router.message(Command("admin"))
async def cmd_admin(message: Message):

    await message.answer(
        "üë®‚Äçüíº <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
        "üìä <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "/id - –ø–æ–ª—É—á–∏—Ç—å ID —ç—Ç–æ–≥–æ —á–∞—Ç–∞\n"
        "/orders - –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫\n"
        "/order <–Ω–æ–º–µ—Ä_–∑–∞—è–≤–∫–∏> - –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ –ø–æ –∫–æ–∫—Ä–µ—Ç–Ω–æ–π –∑–∞—è–≤–∫–µ\n\n"
        "‚öôÔ∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º:</b>\n"
        "/restart - –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
        "/stop - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞\n\n"
        "üí° <i>–í—Å–µ –∫–æ–º–∞–Ω–¥—ã —Ä–∞–±–æ—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ –≤ —ç—Ç–æ–º —á–∞—Ç–µ</i>"
    )


@admin_router.message(Command("id"))
async def cmd_id(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç ID —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞"""
    await message.answer(f"üÜî ID —ç—Ç–æ–≥–æ —á–∞—Ç–∞: <code>{message.chat.id}</code>")


@admin_router.callback_query(F.data.startswith("call_"))
async def handle_call_action(callback: CallbackQuery, db: Database):
    try:
        order_id = int(callback.data.split("_")[1])
        async with db.get_session() as session:
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É –∏–∑ –ë–î
            order = await session.get(Order, order_id)
            await callback.answer(f"–ó–≤–æ–Ω–∏–º –∫–ª–∏–µ–Ω—Ç—É: {order.phone}")
        logger.info(f"‚òéÔ∏è –ó–≤–æ–Ω–æ–∫ –∫–ª–∏–µ–Ω—Ç—É")
    except Exception as e:
        logger.error(f"Error in call client action: {e}")
        await callback.answer(ClientReplies.ERROR_ALERT, show_alert=True)
    finally:

        await callback.answer()


@admin_router.callback_query(F.data.startswith("complete_"))
async def handle_complete_action(callback: CallbackQuery, db: Database):
    try:
        order_id = int(callback.data.split("_")[1])
        async with db.get_session() as session:
            await session.execute(
                update(Order)
                .where(Order.id == order_id)
                .values(status=OrderStatus.COMPLETED)
            )
            await session.commit()

        await callback.answer("–ó–∞—è–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        await callback.message.edit_text(
            f"‚úÖ {callback.message.text}\n\nüèÅ –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º",
            parse_mode="HTML"
        )

    except Exception as e:
        logger.error(f"Error in complete order action: {e}")
        await callback.answer(ClientReplies.ERROR_ALERT, show_alert=True)
    finally:
        await callback.answer()


@admin_router.callback_query(F.data.startswith("drop_"))
async def handle_drop_order(callback: CallbackQuery, db: Database):
    try:
        order_id = int(callback.data.split("_")[1])
        async with db.get_session() as session:
            await session.execute(
                update(Order)
                .where(Order.id == order_id)
                .values(status=OrderStatus.REJECTED)
            )
            await session.commit()
        await callback.answer("–ó–∞—è–≤–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞!")
        await callback.message.edit_text(
            f"‚ùå {callback.message.text}\n\nüèÅ –ó–∞—è–≤–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º",
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"Error in drop order action: {e}")
        await callback.answer(ClientReplies.ERROR_ALERT, show_alert=True)
    finally:
        await callback.answer()

@admin_router.message(Command("orders"))
async def cmd_orders(message: Message, db: Database):
    try:
        async with db.get_session() as session:
            orders = await session.execute(select(Order).order_by(Order.created_at.desc()))
            orders_list = orders.scalars().all()
            if not orders_list:
                await message.answer("–ó–∞—è–≤–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç")
                return
            response = "üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫:\n\n"
            for order in orders_list:
                response += f"#{order.id} | {order.name} | {order.phone} | {order.city} | {order.car_model} | {order.status}\n"
            await message.answer(response)
    except Exception as e:
        logger.error(f"Error in get orders action: {e}")
        await message.answer(ClientReplies.ERROR_ALERT, show_alert=True)

@admin_router.message(Command("order"))
async def cmd_order_detail(message: Message, db: Database):
    try:
        order_id = int(message.text.split()[1])
        async with db.get_session() as session:
            order = await session.get(Order, order_id)
            if not order:
                await message.answer("–ù–µ –Ω–∞—à–ª–∏ –∑–∞—è–≤–∫—É –ø–æ —ç—Ç–æ–º—É –Ω–æ–º–µ—Ä—É üòî\n\n"
                                     "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /order <ID_–∑–∞—è–≤–∫–∏>")
                return

            detail_text = (
                f"üìã {hbold('–î–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏')} #{order.id}\n\n"
                f"üë§ {hbold('–ö–ª–∏–µ–Ω—Ç:')} {order.name}\n"
                f"üìû {hbold('–¢–µ–ª–µ—Ñ–æ–Ω:')} {hlink(order.phone, f'tel:{order.phone}')}\n"
                f"üìß {hbold('Email:')} {order.email}\n"
                f"üöó {hbold('–ê–≤—Ç–æ–º–æ–±–∏–ª—å:')} {order.car_model}\n"
                f"üí∞ {hbold('–ë—é–¥–∂–µ—Ç:')} {order.budget} USD\n"
                f"‚è∞ {hbold('–°–æ–∑–¥–∞–Ω–∞:')} {order.created_at.strftime('%d.%m.%Y %H:%M')}\n"
                f"üìä {hbold('–°—Ç–∞—Ç—É—Å:')} {order.status}"
            )
            await message.answer(detail_text, parse_mode="HTML", reply_markup=get_admin_order_keyboard(order_id=order.id))
    except Exception as e:
        logger.error(f"Error in order detail action: {e}")

        await message.answer(ClientReplies.ERROR_ALERT, show_alert=True)


#
#@router.message(Command("restart"))
#async def cmd_restart(message: Message):
#    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
#    if not is_admin(message.chat.id):
#        return
#
#    await message.answer("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞...")
#    logger.info("–ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω –ø–æ –∫–æ–º–∞–Ω–¥–µ –∞–¥–º–∏–Ω–∞")
#    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
#
#
#@router.message(Command("stop"))
#async def cmd_stop(message: Message):
#    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
#    if not is_admin(message.chat.id):
#        return
#
#    await message.answer("üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –±–æ—Ç–∞...")
#    logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ –∫–æ–º–∞–Ω–¥–µ –∞–¥–º–∏–Ω–∞")
#    # sys.exit(0) - –ª—É—á—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å, –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã